class MyCircularDeque {
public:
      int *arr;
      int k;
      int front;
      int rear;
        

    MyCircularDeque(int k) {
         front = -1;
         rear = -1;
         this -> k = k;
         arr = new int[k];
    }
    
    bool insertFront(int value) {
           
       if( (rear + 1) % k == front){
           return false;
       }

       if( front == -1){
           front = rear = 0;
       }
       else if( front == 0){
        front = k - 1;
       }

       else{ 
           front = (front - 1 + k) % k;
       }

      arr[front] = value;
      return true;

    }
    
    bool insertLast(int value) {
         
         if( ( rear + 1) % (k) == front){
            return false;
         }

         if( front == -1){
            front = rear = 0;
         }
         else{
            rear = (rear+1) % k;
         }

          arr[rear] = value;
          return true;

    } 
    
    bool deleteFront() {
           
           if( front == -1){
            return false;
           }
           else if( front == rear)
           {
            front = rear = -1;
           }
           else{
            front = ( front + 1 ) % k;
           }
           
         return true;
    }
    
    bool deleteLast() {
           
       if(front == -1){
        return false;
       }

       if(front == rear){
        rear = front = -1;
       }
       
       else {
        rear = (rear - 1 + k) % k;
       }
       return true;

    }
    
    int getFront() {
          if( front == -1)
          {
            return -1;
          }
          int ans = arr[front];
          return ans;
    }
    
    int getRear() {
          
         if( rear == -1 ){
              return -1;
         }
          int ans = arr[rear];
          return ans;
    }
    
    bool isEmpty() {
         
         if( front == -1){
            return true;
         }
         return false;

    }
    
    bool isFull() {
        if( (rear + 1) % k == front){
            return true;
        }
        return false;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
