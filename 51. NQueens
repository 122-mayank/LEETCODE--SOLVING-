class Solution {
private:
    void addSolution(vector<string> &board, vector<vector<string>> &ans) {
        ans.push_back(board);
    }

    bool isSafe(int row, int col, vector<string> &board, int n) {
        int x = row, y = col;

        // Check left side of the current row
        while (y >= 0) {
            if (board[x][y] == 'Q') return false;
            y--;
        }

        // Check upper left diagonal
        x = row, y = col;
        while (x >= 0 && y >= 0) {
            if (board[x][y] == 'Q') return false;
            x--, y--;
        }

        // Check lower left diagonal
        x = row, y = col;
        while (x < n && y >= 0) {
            if (board[x][y] == 'Q') return false;
            x++, y--;
        }

        return true;
    }

    void solve(int col, vector<vector<string>> &ans, vector<string> &board, int n) {
        if (col == n) {
            addSolution(board, ans);
            return;
        }

        for (int row = 0; row < n; row++) {
            if (isSafe(row, col, board, n)) {
                board[row][col] = 'Q';
                solve(col + 1, ans, board, n);
                board[row][col] = '.'; // Backtrack
            }
           
        }
    }

public:
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n, string(n, '.'));
        vector<vector<string>> ans;
        solve(0, ans, board, n);
        return ans;
    }
};
