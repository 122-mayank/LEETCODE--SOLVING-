class Solution {
public:
    bool wordPattern(string pattern, string s) {
        int s_len = s.size();
        int pattern_len = pattern.size();

        unordered_map<char,string> mapP;  // mapping pattern to word
        unordered_map<string,char> mapS;//mapping word to pattern

       vector<string> words;
       stringstream ss(s);
       string word;

       while( ss >> word){
        words.push_back(word);
       }

       if( pattern.size() != words.size()){
        return false;
       }

       for( int i = 0 ;  i < pattern.size() ; i++){

        char c = pattern[i];
        string w = words[i];
        
        if( mapP.count(c) && mapP[c] != w){
            return false;
        }
         if( mapS.count(w) && mapS[w] != c){
            return false;
        }
        
        mapP[c] = w;
        mapS[w] = c;

       }

        return true;
    }
};
