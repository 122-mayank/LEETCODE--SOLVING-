class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        
        ListNode* list1 = new ListNode(0);  // dummy head for < x
        ListNode* list2 = new ListNode(0);  // dummy head for >= x
        ListNode* prev1 = list1;
        ListNode* prev2 = list2;
        ListNode* temp = head;

        // Single pass to partition nodes
        while (temp != NULL) {
            if (temp->val < x) {
                list1->next = temp;
                list1 = temp;
            } else {
                list2->next = temp;
                list2 = temp;
            }
            temp = temp->next;
        }

        // Avoid cycle in the final list
        list2->next = NULL;

        // Merge two partitions
        list1->next = prev2->next;

        // Free dummy node memory if needed (not required in most cases)
        // delete prev2;

        return prev1->next;
    }
};
